import pandas as pd
from datetime import datetime
from typing import Optional


class JiraKPITracker:
    def __init__(self, csv_path: str):
        self.csv_path = csv_path
        self.df = pd.read_csv(csv_path)
        self.preprocess()

    def preprocess(self):
        self.df['Timestamp'] = pd.to_datetime(self.df['Timestamp'], errors='coerce')
        self.df = self.df.sort_values(by=['Jira_Id', 'Timestamp'])
        self.df = self.df[self.df['Change_Item'].str.lower() == 'status']

    def calculate_ft_duration(self) -> pd.DataFrame:
        durations = []

        for jira_id, group in self.df.groupby('Jira_Id'):
            start_time: Optional[pd.Timestamp] = None
            end_time: Optional[pd.Timestamp] = None
            epic_link = group['epic_link'].iloc[0] if 'epic_link' in group.columns else 'N/A'

            for _, row in group.iterrows():
                status = row['Change_Value'].strip().upper()

                if not start_time and status == 'FT IN PROGRESS':
                    start_time = row['Timestamp']

                elif start_time and status in ('READY FOR UAT', 'UAT IN PROGRESS'):
                    end_time = row['Timestamp']
                    break

            durations.append({
                'Jira_Id': jira_id,
                'Epic': epic_link,
                'FT Start': start_time,
                'FT End': end_time,
                'FT Duration (days)': round((end_time - start_time).total_seconds() / (24 * 3600), 2)
                if start_time and end_time else None
            })

        return pd.DataFrame(durations)


# --- Execution Entry Point ---
if __name__ == "__main__":
    tracker = JiraKPITracker("jira_logs.csv")  # Replace with your actual CSV path
    ft_durations = tracker.calculate_ft_duration()
    ft_durations.to_excel("ft_test_durations.xlsx", index=False)
    print("FT testing duration file generated: ft_test_durations.xlsx")