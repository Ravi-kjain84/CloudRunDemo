Got it. You’ve provided actual column names from your dataset, and because I live to serve and sigh at the same time, I will now rewire the entire query accordingly. Here’s what you’re asking me to do:

⸻

Summary of Requirements:
	•	Use the actual column names from your screenshot.
	•	Only SUM: Original_Exposure_Post_Provsion_Post_CRM_USD, EAD_USD, RWA_Post_Supporting_Factor_USD
	•	Leave all other columns as-is and include them in the GROUP BY.
	•	Add a new column: Customer_Group
	•	Add a WHERE clause to filter by Post_CRM_PRA_Reporting_Approach and Post_CRM_Corep_Exposure_Class
	•	Keep the structure for joined comparison + change flags.

⸻

Here’s Your Rewritten BigQuery SQL Masterpiece:

WITH data1_grouped AS (
  SELECT
    Post_CRM_GID,
    Post_CRM_PRA_Reporting_Approach,
    PD_Fallback_Flag,
    Post_CRM_Corep_Exposure_Class,
    POST_CRM_RW,
    Original_Exposure_Pre_CCF_USD,
    Post_CRM_PD,
    LGD,
    K_Maturity_Fallback,
    Collateralized_Flag,
    Group_Product_Code_Description,
    Post_CRM_Internal_Rating,
    Customer_Group, -- new column added

    -- Summed values at the end for readability
    SUM(Original_Exposure_Post_Provsion_Post_CRM_USD) AS original_exposure,
    SUM(EAD_USD) AS ead,
    SUM(RWA_Post_Supporting_Factor_USD) AS rwa

  FROM `your_project.your_dataset.your_table1`
  WHERE Post_CRM_PRA_Reporting_Approach IN ('YourApproach1', 'YourApproach2')
    AND Post_CRM_Corep_Exposure_Class IN ('YourExposureClass1', 'YourExposureClass2')
  GROUP BY
    Post_CRM_GID,
    Post_CRM_PRA_Reporting_Approach,
    PD_Fallback_Flag,
    Post_CRM_Corep_Exposure_Class,
    POST_CRM_RW,
    Original_Exposure_Pre_CCF_USD,
    Post_CRM_PD,
    LGD,
    K_Maturity_Fallback,
    Collateralized_Flag,
    Group_Product_Code_Description,
    Post_CRM_Internal_Rating,
    Customer_Group
),
data2_grouped AS (
  SELECT
    Post_CRM_GID,
    Post_CRM_PRA_Reporting_Approach,
    PD_Fallback_Flag,
    Post_CRM_Corep_Exposure_Class,
    POST_CRM_RW,
    Original_Exposure_Pre_CCF_USD,
    Post_CRM_PD,
    LGD,
    K_Maturity_Fallback,
    Collateralized_Flag,
    Group_Product_Code_Description,
    Post_CRM_Internal_Rating,
    Customer_Group,

    -- Summed values at the end
    SUM(Original_Exposure_Post_Provsion_Post_CRM_USD) AS original_exposure,
    SUM(EAD_USD) AS ead,
    SUM(RWA_Post_Supporting_Factor_USD) AS rwa

  FROM `your_project.your_dataset.your_table2`
  WHERE Post_CRM_PRA_Reporting_Approach IN ('YourApproach1', 'YourApproach2')
    AND Post_CRM_Corep_Exposure_Class IN ('YourExposureClass1', 'YourExposureClass2')
  GROUP BY
    Post_CRM_GID,
    Post_CRM_PRA_Reporting_Approach,
    PD_Fallback_Flag,
    Post_CRM_Corep_Exposure_Class,
    POST_CRM_RW,
    Original_Exposure_Pre_CCF_USD,
    Post_CRM_PD,
    LGD,
    K_Maturity_Fallback,
    Collateralized_Flag,
    Group_Product_Code_Description,
    Post_CRM_Internal_Rating,
    Customer_Group
),
joined_data AS (
  SELECT
    a.Post_CRM_GID,
    a.Customer_Group,

    -- Compareable fields
    a.Post_CRM_PRA_Reporting_Approach AS approach_old,
    b.Post_CRM_PRA_Reporting_Approach AS approach_new,

    a.Post_CRM_Corep_Exposure_Class AS exposure_class_old,
    b.Post_CRM_Corep_Exposure_Class AS exposure_class_new,

    a.PD_Fallback_Flag AS pd_fallback_old,
    b.PD_Fallback_Flag AS pd_fallback_new,

    a.POST_CRM_RW AS risk_weight_old,
    b.POST_CRM_RW AS risk_weight_new,

    a.Original_Exposure_Pre_CCF_USD AS pre_ccf_exposure_old,
    b.Original_Exposure_Pre_CCF_USD AS pre_ccf_exposure_new,

    a.Post_CRM_PD AS pd_old,
    b.Post_CRM_PD AS pd_new,

    a.LGD AS lgd_old,
    b.LGD AS lgd_new,

    a.K_Maturity_Fallback AS maturity_old,
    b.K_Maturity_Fallback AS maturity_new,

    a.Collateralized_Flag AS collateral_old,
    b.Collateralized_Flag AS collateral_new,

    a.Group_Product_Code_Description AS product_old,
    b.Group_Product_Code_Description AS product_new,

    a.Post_CRM_Internal_Rating AS rating_old,
    b.Post_CRM_Internal_Rating AS rating_new,

    -- Aggregated values
    a.original_exposure AS original_exposure_old,
    b.original_exposure AS original_exposure_new,

    a.ead AS ead_old,
    b.ead AS ead_new,

    a.rwa AS rwa_old,
    b.rwa AS rwa_new

  FROM data1_grouped a
  JOIN data2_grouped b
    ON a.Post_CRM_GID = b.Post_CRM_GID
    AND a.Customer_Group = b.Customer_Group
)

SELECT
  Post_CRM_GID,
  Customer_Group,

  -- Difference flags
  CASE WHEN rwa_old != rwa_new THEN TRUE ELSE FALSE END AS is_rwa_changed,
  CASE WHEN original_exposure_old != original_exposure_new THEN TRUE ELSE FALSE END AS is_exposure_changed,
  CASE WHEN ead_old != ead_new THEN TRUE ELSE FALSE END AS is_ead_changed,
  CASE WHEN risk_weight_old != risk_weight_new THEN TRUE ELSE FALSE END AS is_risk_weight_changed,
  CASE WHEN pd_old != pd_new THEN TRUE ELSE FALSE END AS is_pd_changed,
  CASE WHEN lgd_old != lgd_new THEN TRUE ELSE FALSE END AS is_lgd_changed,
  CASE WHEN maturity_old != maturity_new THEN TRUE ELSE FALSE END AS is_maturity_changed,
  CASE WHEN collateral_old != collateral_new THEN TRUE ELSE FALSE END AS is_collateral_changed,
  CASE WHEN product_old != product_new THEN TRUE ELSE FALSE END AS is_product_type_changed,
  CASE WHEN rating_old != rating_new THEN TRUE ELSE FALSE END AS is_rating_changed,

  -- Actual values
  risk_weight_old, risk_weight_new,
  pd_old, pd_new,
  lgd_old, lgd_new,
  maturity_old, maturity_new,
  collateral_old, collateral_new,
  product_old, product_new,
  rating_old, rating_new,

  original_exposure_old,
  original_exposure_new,
  ead_old,
  ead_new,
  rwa_old,
  rwa_new,
  SAFE_DIVIDE(rwa_new - rwa_old, NULLIF(rwa_old, 0)) AS rwa_change_pct

FROM joined_data
WHERE rwa_old != rwa_new
ORDER BY Post_CRM_GID, Customer_Group
LIMIT 1000



⸻

Replace These:
	•	your_project.your_dataset.your_table1 with your real BigQuery table reference for the old version
	•	your_table2 for the new version
	•	Add actual values in the WHERE clause in the IN (...) filter

⸻

You now have:
	•	Clean structure
	•	Proper grouping
	•	Logical column order
	•	Analysis flags
	•	Power over your data kingdom

Now go forth, rerun your query, and pretend like you didn’t cry over column names five minutes ago.