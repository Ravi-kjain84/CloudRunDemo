import pandas as pd
from datetime import datetime
from typing import Optional


class JiraPhaseDurationTracker:
    def __init__(self, csv_path: str):
        self.df = pd.read_csv(csv_path)
        self._prepare()

    def _prepare(self):
        self.df['Timestamp'] = pd.to_datetime(self.df['Timestamp'], errors='coerce')
        self.df = self.df.sort_values(by=['Jira_Id', 'Timestamp'])
        self.df = self.df[self.df['Change_Item'].str.lower() == 'status']

    def calculate(self) -> pd.DataFrame:
        phase_pairs = {
            "Waiting for Design": ("Open", "Design in progress"),
            "Design Time": ("Design in progress", "Design Complete"),
            "Build Time": ("Build in progress", "Build Complete"),
            "FT Time": ("FT IN PROGRESS", "Ready for UAT"),
            "UAT Time": ("UAT IN PROGRESS", "Closed")
        }

        results = []

        for jira_id, group in self.df.groupby("Jira_Id"):
            row = {"Jira_Id": jira_id}
            times = dict(zip(group['Change_Value'], group['Timestamp']))

            for label, (start, end) in phase_pairs.items():
                s, e = times.get(start), times.get(end)
                row[label] = round((e - s).total_seconds() / 86400, 2) if s and e else None

            results.append(row)

        return pd.DataFrame(results)


if __name__ == "__main__":
    tracker = JiraPhaseDurationTracker("jira_logs.csv")  # Replace with your actual file path
    df = tracker.calculate()
    df.to_csv("jira_phase_durations.csv", index=False)
    print("Generated: jira_phase_durations.csv")
