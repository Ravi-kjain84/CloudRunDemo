import torch
import torch.nn as nn
import torch.optim as optim

# Force CPU usage
device = torch.device("cpu")
print(f"Using device: {device}")

# Step 1: Dummy input and output data (on CPU)
x = torch.randn(100, 10).to(device)
y = torch.randn(100, 1).to(device)

# Step 2: Simple feedforward neural network
class SimpleNet(nn.Module):
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.fc1 = nn.Linear(10, 50)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(50, 1)

    def forward(self, x):
        out = self.relu(self.fc1(x))
        return self.fc2(out)

model = SimpleNet().to(device)

# Step 3: Loss and optimizer
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.01)

# Step 4: Training loop
for epoch in range(10):
    model.train()
    outputs = model(x)
    loss = criterion(outputs, y)

    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    print(f"Epoch [{epoch+1}/10], Loss: {loss.item():.4f}")
