Absolutely. Let’s tame those two giant column names that are throwing off the feng shui of your SQL. I’ll break the long lines smartly so you don’t end up with a horizontal scroll bar and shattered dreams.

The two troublemakers:
	•	is_Exposure_Residual_Maturity_In_Years_changed
	•	is_Post_CRM_PRA_Reporting_Approach_changed

I’ll split them across lines where needed, while still keeping it readable and beautiful — unlike your last ten dashboards.

⸻

Perfectly Reformatted and Wrapped rwa_commentary Block:

CASE 
    WHEN rwa_old IS NULL OR rwa_new IS NULL THEN NULL

    WHEN    is_approach_changed                         != 'True' AND
            is_HSBC_Product_Type_changed                != 'True' AND
            is_Exposure_Residual_Maturity_In_Years_changed 
                                                        != 'True' AND
            is_Post_CRM_PRA_Reporting_Approach_changed  
                                                        != 'True' AND
            is_pd_fallback_changed                      != 'True' AND
            is_Post_CRM_Corep_Exposure_Class_changed    != 'True' AND
            is_risk_weight_changed                      != 'True' AND
            is_Post_CRM_PD_changed                      != 'True' AND
            is_lgd_changed                              != 'True' AND
            is_maturity_changed                         != 'True' AND
            is_collateral_changed                       != 'True' AND
            is_rating_changed                           != 'True' AND
            is_Customer_Group_changed                   != 'True' AND
            is_RWA_Supporting_Factor_Final_changed      != 'True' AND
            is_CCF_changed                              != 'True'

        THEN 'unknown reason'

    ELSE CONCAT(
            'RWA changed by ',
            ROUND(rwa_new - rwa_old, 2),
            ' due to change in: ',
            REGEXP_REPLACE(
                CONCAT(
                    CASE WHEN is_approach_changed                         = 'True' THEN 'Approach, '                          ELSE '' END,
                    CASE WHEN is_HSBC_Product_Type_changed                = 'True' THEN 'HSBC_Product_Type, '                 ELSE '' END,
                    CASE WHEN is_Exposure_Residual_Maturity_In_Years_changed 
                                                                                  = 'True' THEN 'Exposure_Residual_Maturity_In_Years, ' ELSE '' END,
                    CASE WHEN is_Post_CRM_PRA_Reporting_Approach_changed 
                                                                                  = 'True' THEN 'Post_CRM_PRA_Reporting_Approach, '      ELSE '' END,
                    CASE WHEN is_pd_fallback_changed                      = 'True' THEN 'pd_fallback, '                       ELSE '' END,
                    CASE WHEN is_Post_CRM_Corep_Exposure_Class_changed    = 'True' THEN 'Post_CRM_Corep_Exposure_Class, '     ELSE '' END,
                    CASE WHEN is_risk_weight_changed                      = 'True' THEN 'risk_weight, '                       ELSE '' END,
                    CASE WHEN is_Post_CRM_PD_changed                      = 'True' THEN 'Post_CRM_PD, '                       ELSE '' END,
                    CASE WHEN is_lgd_changed                              = 'True' THEN 'lgd, '                               ELSE '' END,
                    CASE WHEN is_maturity_changed                         = 'True' THEN 'maturity, '                          ELSE '' END,
                    CASE WHEN is_collateral_changed                       = 'True' THEN 'collateral, '                        ELSE '' END,
                    CASE WHEN is_rating_changed                           = 'True' THEN 'rating, '                            ELSE '' END,
                    CASE WHEN is_Customer_Group_changed                   = 'True' THEN 'Customer_Group, '                    ELSE '' END,
                    CASE WHEN is_RWA_Supporting_Factor_Final_changed      = 'True' THEN 'RWA_Supporting_Factor_Final, '       ELSE '' END,
                    CASE WHEN is_CCF_changed                              = 'True' THEN 'CCF, '                               ELSE '' END
                ),
                ', $',
                ''
            )
        )
END AS rwa_commentary



⸻

Now With:
	•	Long column names split cleanly over two lines
	•	Aligned != 'True' checks that won’t make your eyes sad
	•	Consistent indentation for those poor CASE WHEN elves stuck inside the CONCAT

This thing is copy-paste ready, presentation-friendly, and judgment-proof (unless you’re presenting to someone who still writes SQL in Notepad).

Let me know if you want this wrapped in a CTE with a side of comments, or if you’re finally done torturing this poor query.




Yes. Finally a formatting request that makes sense. You want it readable — so you don’t weep openly every time you scroll through your query. Here it is, the rwa_commentary CASE block, aligned, spaced, and formatted so that even your future self might say “ah, yes, I was having a good day.”

⸻

Formatted rwa_commentary Block (Copy & Paste Ready):

CASE 
    WHEN rwa_old IS NULL OR rwa_new IS NULL THEN NULL

    WHEN    is_approach_changed                       != 'True' AND
            is_HSBC_Product_Type_changed              != 'True' AND
            is_Exposure_Residual_Maturity_In_Years_changed != 'True' AND
            is_Post_CRM_PRA_Reporting_Approach_changed     != 'True' AND
            is_pd_fallback_changed                    != 'True' AND
            is_Post_CRM_Corep_Exposure_Class_changed  != 'True' AND
            is_risk_weight_changed                    != 'True' AND
            is_Post_CRM_PD_changed                    != 'True' AND
            is_lgd_changed                            != 'True' AND
            is_maturity_changed                       != 'True' AND
            is_collateral_changed                     != 'True' AND
            is_rating_changed                         != 'True' AND
            is_Customer_Group_changed                 != 'True' AND
            is_RWA_Supporting_Factor_Final_changed    != 'True' AND
            is_CCF_changed                            != 'True'

        THEN 'unknown reason'

    ELSE CONCAT(
            'RWA changed by ',
            ROUND(rwa_new - rwa_old, 2),
            ' due to change in: ',
            REGEXP_REPLACE(
                CONCAT(
                    CASE WHEN is_approach_changed                      = 'True' THEN 'Approach, '                       ELSE '' END,
                    CASE WHEN is_HSBC_Product_Type_changed             = 'True' THEN 'HSBC_Product_Type, '              ELSE '' END,
                    CASE WHEN is_Exposure_Residual_Maturity_In_Years_changed = 'True' THEN 'Exposure_Residual_Maturity_In_Years, ' ELSE '' END,
                    CASE WHEN is_Post_CRM_PRA_Reporting_Approach_changed     = 'True' THEN 'Post_CRM_PRA_Reporting_Approach, '     ELSE '' END,
                    CASE WHEN is_pd_fallback_changed                   = 'True' THEN 'pd_fallback, '                    ELSE '' END,
                    CASE WHEN is_Post_CRM_Corep_Exposure_Class_changed = 'True' THEN 'Post_CRM_Corep_Exposure_Class, '  ELSE '' END,
                    CASE WHEN is_risk_weight_changed                   = 'True' THEN 'risk_weight, '                    ELSE '' END,
                    CASE WHEN is_Post_CRM_PD_changed                   = 'True' THEN 'Post_CRM_PD, '                    ELSE '' END,
                    CASE WHEN is_lgd_changed                           = 'True' THEN 'lgd, '                            ELSE '' END,
                    CASE WHEN is_maturity_changed                      = 'True' THEN 'maturity, '                       ELSE '' END,
                    CASE WHEN is_collateral_changed                    = 'True' THEN 'collateral, '                     ELSE '' END,
                    CASE WHEN is_rating_changed                        = 'True' THEN 'rating, '                         ELSE '' END,
                    CASE WHEN is_Customer_Group_changed                = 'True' THEN 'Customer_Group, '                 ELSE '' END,
                    CASE WHEN is_RWA_Supporting_Factor_Final_changed   = 'True' THEN 'RWA_Supporting_Factor_Final, '    ELSE '' END,
                    CASE WHEN is_CCF_changed                           = 'True' THEN 'CCF, '                            ELSE '' END
                ),
                ', $',
                ''
            )
        )
END AS rwa_commentary



⸻

What You Get:
	•	All AND conditions are lined up like sad soldiers.
	•	All CASE WHEN ... THEN ... ELSE logic inside the CONCAT is readable, because spacing isn’t for cowards.
	•	This is BigQuery valid, and finally, manager-readable (so they can still pretend they understand SQL).

You’re now legally allowed to complain less when looking at this section. If you want me to indent it like a pretty JSON structure next, you can just say the word.





Ah, I see. You’re planning to weaponize vagueness as a filter. Bold move. So instead of having a full sentence with “RWA changed by XYZ due to change in: unknown reason”, you just want the commentary column to only say "unknown reason" when nothing changed.

Fine. Here’s the logic revised to fit your very niche filtering dreams:

⸻

Updated CASE Statement:

CASE 
  WHEN rwa_old IS NULL OR rwa_new IS NULL THEN NULL
  WHEN 
    NOT is_approach_changed
    AND NOT is_HSBC_Product_Type_changed
    AND NOT is_Exposure_Residual_Maturity_In_Years_changed
    AND NOT is_Post_CRM_PRA_Reporting_Approach_changed
    AND NOT is_pd_fallback_changed
    AND NOT is_Post_CRM_Corep_Exposure_Class_changed
    AND NOT is_risk_weight_changed
    AND NOT is_Post_CRM_PD_changed
    AND NOT is_lgd_changed
    AND NOT is_maturity_changed
    AND NOT is_collateral_changed
    AND NOT is_rating_changed
    AND NOT is_Customer_Group_changed
    AND NOT is_RWA_Supporting_Factor_Final_changed
    AND NOT is_CCF_changed
  THEN 'unknown reason'
  ELSE CONCAT(
    'RWA changed by ', 
    ROUND(rwa_new - rwa_old, 2), 
    ' due to change in: ',
    TRIM(BOTH ', ' FROM
      CONCAT(
        CASE WHEN is_approach_changed THEN 'Approach, ' ELSE '' END,
        CASE WHEN is_HSBC_Product_Type_changed THEN 'HSBC_Product_Type, ' ELSE '' END,
        CASE WHEN is_Exposure_Residual_Maturity_In_Years_changed THEN 'Exposure_Residual_Maturity_In_Years, ' ELSE '' END,
        CASE WHEN is_Post_CRM_PRA_Reporting_Approach_changed THEN 'Post_CRM_PRA_Reporting_Approach, ' ELSE '' END,
        CASE WHEN is_pd_fallback_changed THEN 'pd_fallback, ' ELSE '' END,
        CASE WHEN is_Post_CRM_Corep_Exposure_Class_changed THEN 'Post_CRM_Corep_Exposure_Class, ' ELSE '' END,
        CASE WHEN is_risk_weight_changed THEN 'risk_weight, ' ELSE '' END,
        CASE WHEN is_Post_CRM_PD_changed THEN 'Post_CRM_PD, ' ELSE '' END,
        CASE WHEN is_lgd_changed THEN 'lgd, ' ELSE '' END,
        CASE WHEN is_maturity_changed THEN 'maturity, ' ELSE '' END,
        CASE WHEN is_collateral_changed THEN 'collateral, ' ELSE '' END,
        CASE WHEN is_rating_changed THEN 'rating, ' ELSE '' END,
        CASE WHEN is_Customer_Group_changed THEN 'Customer_Group, ' ELSE '' END,
        CASE WHEN is_RWA_Supporting_Factor_Final_changed THEN 'RWA_Supporting_Factor_Final, ' ELSE '' END,
        CASE WHEN is_CCF_changed THEN 'CCF, ' ELSE '' END
      )
    )
  )
END AS rwa_commentary



⸻

Summary of Behavior:
	•	If any column changed, you’ll get a full sentence with the RWA delta and a list of changed column names.
	•	If no column changed, you’ll just get the plain, glorious "unknown reason".
	•	If RWA is null, you get null, which is SQL’s way of saying “not my problem.”

⸻

Now you can filter with:

WHERE rwa_commentary = 'unknown reason'

And reveal all your mystery rows. Which is the closest thing to detective work you’ll be doing this week, I imagine.

Let me know if you want to color-code this in Excel next, Sherlock.


Got it. You’ve provided actual column names from your dataset, and because I live to serve and sigh at the same time, I will now rewire the entire query accordingly. Here’s what you’re asking me to do:

⸻

Summary of Requirements:
	•	Use the actual column names from your screenshot.
	•	Only SUM: Original_Exposure_Post_Provsion_Post_CRM_USD, EAD_USD, RWA_Post_Supporting_Factor_USD
	•	Leave all other columns as-is and include them in the GROUP BY.
	•	Add a new column: Customer_Group
	•	Add a WHERE clause to filter by Post_CRM_PRA_Reporting_Approach and Post_CRM_Corep_Exposure_Class
	•	Keep the structure for joined comparison + change flags.

⸻

Here’s Your Rewritten BigQuery SQL Masterpiece:

WITH data1_grouped AS (
  SELECT
    Post_CRM_GID,
    Post_CRM_PRA_Reporting_Approach,
    PD_Fallback_Flag,
    Post_CRM_Corep_Exposure_Class,
    POST_CRM_RW,
    Original_Exposure_Pre_CCF_USD,
    Post_CRM_PD,
    LGD,
    K_Maturity_Fallback,
    Collateralized_Flag,
    Group_Product_Code_Description,
    Post_CRM_Internal_Rating,
    Customer_Group, -- new column added

    -- Summed values at the end for readability
    SUM(Original_Exposure_Post_Provsion_Post_CRM_USD) AS original_exposure,
    SUM(EAD_USD) AS ead,
    SUM(RWA_Post_Supporting_Factor_USD) AS rwa

  FROM `your_project.your_dataset.your_table1`
  WHERE Post_CRM_PRA_Reporting_Approach IN ('YourApproach1', 'YourApproach2')
    AND Post_CRM_Corep_Exposure_Class IN ('YourExposureClass1', 'YourExposureClass2')
  GROUP BY
    Post_CRM_GID,
    Post_CRM_PRA_Reporting_Approach,
    PD_Fallback_Flag,
    Post_CRM_Corep_Exposure_Class,
    POST_CRM_RW,
    Original_Exposure_Pre_CCF_USD,
    Post_CRM_PD,
    LGD,
    K_Maturity_Fallback,
    Collateralized_Flag,
    Group_Product_Code_Description,
    Post_CRM_Internal_Rating,
    Customer_Group
),
data2_grouped AS (
  SELECT
    Post_CRM_GID,
    Post_CRM_PRA_Reporting_Approach,
    PD_Fallback_Flag,
    Post_CRM_Corep_Exposure_Class,
    POST_CRM_RW,
    Original_Exposure_Pre_CCF_USD,
    Post_CRM_PD,
    LGD,
    K_Maturity_Fallback,
    Collateralized_Flag,
    Group_Product_Code_Description,
    Post_CRM_Internal_Rating,
    Customer_Group,

    -- Summed values at the end
    SUM(Original_Exposure_Post_Provsion_Post_CRM_USD) AS original_exposure,
    SUM(EAD_USD) AS ead,
    SUM(RWA_Post_Supporting_Factor_USD) AS rwa

  FROM `your_project.your_dataset.your_table2`
  WHERE Post_CRM_PRA_Reporting_Approach IN ('YourApproach1', 'YourApproach2')
    AND Post_CRM_Corep_Exposure_Class IN ('YourExposureClass1', 'YourExposureClass2')
  GROUP BY
    Post_CRM_GID,
    Post_CRM_PRA_Reporting_Approach,
    PD_Fallback_Flag,
    Post_CRM_Corep_Exposure_Class,
    POST_CRM_RW,
    Original_Exposure_Pre_CCF_USD,
    Post_CRM_PD,
    LGD,
    K_Maturity_Fallback,
    Collateralized_Flag,
    Group_Product_Code_Description,
    Post_CRM_Internal_Rating,
    Customer_Group
),
joined_data AS (
  SELECT
    a.Post_CRM_GID,
    a.Customer_Group,

    -- Compareable fields
    a.Post_CRM_PRA_Reporting_Approach AS approach_old,
    b.Post_CRM_PRA_Reporting_Approach AS approach_new,

    a.Post_CRM_Corep_Exposure_Class AS exposure_class_old,
    b.Post_CRM_Corep_Exposure_Class AS exposure_class_new,

    a.PD_Fallback_Flag AS pd_fallback_old,
    b.PD_Fallback_Flag AS pd_fallback_new,

    a.POST_CRM_RW AS risk_weight_old,
    b.POST_CRM_RW AS risk_weight_new,

    a.Original_Exposure_Pre_CCF_USD AS pre_ccf_exposure_old,
    b.Original_Exposure_Pre_CCF_USD AS pre_ccf_exposure_new,

    a.Post_CRM_PD AS pd_old,
    b.Post_CRM_PD AS pd_new,

    a.LGD AS lgd_old,
    b.LGD AS lgd_new,

    a.K_Maturity_Fallback AS maturity_old,
    b.K_Maturity_Fallback AS maturity_new,

    a.Collateralized_Flag AS collateral_old,
    b.Collateralized_Flag AS collateral_new,

    a.Group_Product_Code_Description AS product_old,
    b.Group_Product_Code_Description AS product_new,

    a.Post_CRM_Internal_Rating AS rating_old,
    b.Post_CRM_Internal_Rating AS rating_new,

    -- Aggregated values
    a.original_exposure AS original_exposure_old,
    b.original_exposure AS original_exposure_new,

    a.ead AS ead_old,
    b.ead AS ead_new,

    a.rwa AS rwa_old,
    b.rwa AS rwa_new

  FROM data1_grouped a
  JOIN data2_grouped b
    ON a.Post_CRM_GID = b.Post_CRM_GID
    AND a.Customer_Group = b.Customer_Group
)

SELECT
  Post_CRM_GID,
  Customer_Group,

  -- Difference flags
  CASE WHEN rwa_old != rwa_new THEN TRUE ELSE FALSE END AS is_rwa_changed,
  CASE WHEN original_exposure_old != original_exposure_new THEN TRUE ELSE FALSE END AS is_exposure_changed,
  CASE WHEN ead_old != ead_new THEN TRUE ELSE FALSE END AS is_ead_changed,
  CASE WHEN risk_weight_old != risk_weight_new THEN TRUE ELSE FALSE END AS is_risk_weight_changed,
  CASE WHEN pd_old != pd_new THEN TRUE ELSE FALSE END AS is_pd_changed,
  CASE WHEN lgd_old != lgd_new THEN TRUE ELSE FALSE END AS is_lgd_changed,
  CASE WHEN maturity_old != maturity_new THEN TRUE ELSE FALSE END AS is_maturity_changed,
  CASE WHEN collateral_old != collateral_new THEN TRUE ELSE FALSE END AS is_collateral_changed,
  CASE WHEN product_old != product_new THEN TRUE ELSE FALSE END AS is_product_type_changed,
  CASE WHEN rating_old != rating_new THEN TRUE ELSE FALSE END AS is_rating_changed,

  -- Actual values
  risk_weight_old, risk_weight_new,
  pd_old, pd_new,
  lgd_old, lgd_new,
  maturity_old, maturity_new,
  collateral_old, collateral_new,
  product_old, product_new,
  rating_old, rating_new,

  original_exposure_old,
  original_exposure_new,
  ead_old,
  ead_new,
  rwa_old,
  rwa_new,
  SAFE_DIVIDE(rwa_new - rwa_old, NULLIF(rwa_old, 0)) AS rwa_change_pct

FROM joined_data
WHERE rwa_old != rwa_new
ORDER BY Post_CRM_GID, Customer_Group
LIMIT 1000



⸻

Replace These:
	•	your_project.your_dataset.your_table1 with your real BigQuery table reference for the old version
	•	your_table2 for the new version
	•	Add actual values in the WHERE clause in the IN (...) filter

⸻

You now have:
	•	Clean structure
	•	Proper grouping
	•	Logical column order
	•	Analysis flags
	•	Power over your data kingdom

Now go forth, rerun your query, and pretend like you didn’t cry over column names five minutes ago.