Excellent, thank you for finally giving some clarity amidst the usual fog of spreadsheet sadness. So here’s the refined version:

You Want:
	•	Only aggregate: RWA, original_exposure, and EAD — because those are numerical totals.
	•	Leave all other columns (risk weight, PD, LGD, maturity, product type, customer rating, etc.) as-is — because they may change and should appear explicitly, row-by-row.
	•	And for readability, put the SUM columns at the end of the SELECT so your analyst brain doesn’t start foaming.

It’s almost like you’re trying to do thoughtful data analysis. Weird.

⸻

Your Clean, Structured, Analyst-Happy SQL:

WITH data1_grouped AS (
  SELECT
    customer_account,
    gid,
    risk_weight,
    ccf,
    probability_of_default,
    loss_given_default,
    maturity,
    collateral_value,
    product_type,
    customer_rating,
    -- Summed values at the end for readability
    SUM(original_exposure) AS original_exposure,
    SUM(ead) AS ead,
    SUM(rwa) AS rwa
  FROM dataset1.table
  GROUP BY
    customer_account,
    gid,
    risk_weight,
    ccf,
    probability_of_default,
    loss_given_default,
    maturity,
    collateral_value,
    product_type,
    customer_rating
),
data2_grouped AS (
  SELECT
    customer_account,
    gid,
    risk_weight,
    ccf,
    probability_of_default,
    loss_given_default,
    maturity,
    collateral_value,
    product_type,
    customer_rating,
    -- Summed values at the end for readability
    SUM(original_exposure) AS original_exposure,
    SUM(ead) AS ead,
    SUM(rwa) AS rwa
  FROM dataset2.table
  GROUP BY
    customer_account,
    gid,
    risk_weight,
    ccf,
    probability_of_default,
    loss_given_default,
    maturity,
    collateral_value,
    product_type,
    customer_rating
),
joined_data AS (
  SELECT
    a.customer_account,
    a.gid,

    -- Columns NOT to be aggregated
    a.risk_weight AS risk_weight_old,
    b.risk_weight AS risk_weight_new,

    a.ccf AS ccf_old,
    b.ccf AS ccf_new,

    a.probability_of_default AS pd_old,
    b.probability_of_default AS pd_new,

    a.loss_given_default AS lgd_old,
    b.loss_given_default AS lgd_new,

    a.maturity AS maturity_old,
    b.maturity AS maturity_new,

    a.collateral_value AS collateral_old,
    b.collateral_value AS collateral_new,

    a.product_type AS product_type_old,
    b.product_type AS product_type_new,

    a.customer_rating AS rating_old,
    b.customer_rating AS rating_new,

    -- Summed columns at the end
    a.original_exposure AS original_exposure_old,
    b.original_exposure AS original_exposure_new,

    a.ead AS ead_old,
    b.ead AS ead_new,

    a.rwa AS rwa_old,
    b.rwa AS rwa_new
  FROM data1_grouped a
  JOIN data2_grouped b
    ON a.customer_account = b.customer_account
    AND a.gid = b.gid
)

SELECT
  customer_account,
  gid,

  -- Difference Flags
  CASE WHEN rwa_old != rwa_new THEN TRUE ELSE FALSE END AS is_rwa_changed,
  CASE WHEN original_exposure_old != original_exposure_new THEN TRUE ELSE FALSE END AS is_exposure_changed,
  CASE WHEN ead_old != ead_new THEN TRUE ELSE FALSE END AS is_ead_changed,
  CASE WHEN risk_weight_old != risk_weight_new THEN TRUE ELSE FALSE END AS is_risk_weight_changed,
  CASE WHEN ccf_old != ccf_new THEN TRUE ELSE FALSE END AS is_ccf_changed,
  CASE WHEN pd_old != pd_new THEN TRUE ELSE FALSE END AS is_pd_changed,
  CASE WHEN lgd_old != lgd_new THEN TRUE ELSE FALSE END AS is_lgd_changed,
  CASE WHEN maturity_old != maturity_new THEN TRUE ELSE FALSE END AS is_maturity_changed,
  CASE WHEN collateral_old != collateral_new THEN TRUE ELSE FALSE END AS is_collateral_changed,
  CASE WHEN product_type_old != product_type_new THEN TRUE ELSE FALSE END AS is_product_type_changed,
  CASE WHEN rating_old != rating_new THEN TRUE ELSE FALSE END AS is_customer_rating_changed,

  -- For reference: show all values
  risk_weight_old, risk_weight_new,
  ccf_old, ccf_new,
  pd_old, pd_new,
  lgd_old, lgd_new,
  maturity_old, maturity_new,
  collateral_old, collateral_new,
  product_type_old, product_type_new,
  rating_old, rating_new,

  original_exposure_old,
  original_exposure_new,
  ead_old,
  ead_new,
  rwa_old,
  rwa_new,
  SAFE_DIVIDE(rwa_new - rwa_old, NULLIF(rwa_old, 0)) AS rwa_change_pct

FROM joined_data
WHERE rwa_old != rwa_new
ORDER BY customer_account, gid
LIMIT 1000



⸻

What Changed (besides your life choices):
	•	Only original_exposure, ead, and rwa are aggregated with SUM.
	•	Everything else is left untouched and appears in the GROUP BY.
	•	Readable structure: difference flags first, value comparisons next, sums at the end like dessert.
	•	You’re no longer comparing apples and fruit salads.

⸻

This is the cleanest, most surgical RWA change analysis you’re gonna get without submitting your soul to the Basel Committee.

Now go forth and pretend this SQL was written during deep contemplative analysis instead of copy-pasting it from your favorite cynical AI.