import win32com.client
import pandas as pd
from tqdm import tqdm

class OutlookOrgExtractorByID:
    def __init__(self, input_file):
        self.input_file = input_file
        self.visited = set()
        self.org_chart = []
        self.outlook = win32com.client.Dispatch("Outlook.Application")
        self.namespace = self.outlook.GetNamespace("MAPI")
        # Locate Global Address List
        self.gal = None
        for al in self.namespace.AddressLists:
            if "global address" in al.Name.lower():
                self.gal = al
                break
        if not self.gal:
            raise ValueError("Global Address List not found")

    def load_input_ids(self):
        if self.input_file.lower().endswith(".csv"):
            df = pd.read_csv(self.input_file)
        else:
            df = pd.read_excel(self.input_file)
        if 'Employee ID' not in df.columns:
            raise ValueError("Input file must contain 'Employee ID' column")
        return df['Employee ID'].dropna().astype(str).unique().tolist()

    def resolve_all_users_by_id(self, emp_id):
        """Return all ExchangeUser profiles matching the Alias in GAL."""
        matched = []
        entries = self.gal.AddressEntries
        # Use Find and FindNext to quickly locate matches
        match = entries.Find(f"[Alias] = '{emp_id}'")
        while match:
            try:
                user = match.GetExchangeUser()
                if user:
                    matched.append(user)
            except:
                pass
            match = entries.FindNext()
        if not matched:
            print(f"[SKIPPED] No profiles found for: {emp_id}")
        return matched

    def get_manager_info_by_user(self, user):
        try:
            info = {
                "Employee ID": user.Alias,
                "Employee Name": user.Name,
                "Employee Email": user.PrimarySmtpAddress,
                "Employee Title": user.JobTitle
            }
            mgr = user.Manager
            if mgr:
                info.update({
                    "Manager ID": mgr.Alias,
                    "Manager Name": mgr.Name,
                    "Manager Email": mgr.PrimarySmtpAddress,
                    "Manager Title": mgr.JobTitle
                })
            else:
                info.update({
                    "Manager ID": None,
                    "Manager Name": None,
                    "Manager Email": None,
                    "Manager Title": None
                })
            return info
        except Exception as e:
            print(f"[ERROR] Retrieving manager for {user.Name}: {e}")
            return None

    def crawl_upward(self, emp_id):
        # Resolve all matching profiles first
        users = self.resolve_all_users_by_id(emp_id)
        for user in users:
            key = f"{user.Alias}::{user.Name}"
            if key in self.visited:
                continue
            self.visited.add(key)

            info = self.get_manager_info_by_user(user)
            if info:
                self.org_chart.append(info)
                if info["Manager ID"]:
                    self.crawl_upward(info["Manager ID"])

    def run(self, output_file="employee_manager_with_roles_full.xlsx"):
        input_ids = self.load_input_ids()
        print(f"\nProcessing {len(input_ids)} Employee IDs...\n")
        for emp_id in tqdm(input_ids, desc="Employees", unit="ID"):
            self.crawl_upward(emp_id)
        df = pd.DataFrame(self.org_chart).drop_duplicates()
        df.to_excel(output_file, index=False)
        print(f"\nExport complete: {output_file}")

if __name__ == "__main__":
    extractor = OutlookOrgExtractorByID("input_employee_ids.xlsx")
    extractor.run()